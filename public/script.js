const translations = {
  en: {
    "page-title": "Crop Advisory тАУ Weather Dashboard",
    language: "Language",
    "weather-info": "Weather Information",
    "enter-city": "Enter city name",
    search: "Search",
    "locate-me": "Locate Me",
    "loading-weather": "Loading weather data...",
    temperature: "Temperature:",
    humidity: "Humidity:",
    windSpeed: "Wind Speed:",
    condition: "Condition:",
    "crop-details-title": "ЁЯМ╛ Crop Details",
    "crop-details-description": "Enter details about your crop to get personalized advice.",
    "crop-type-label": "Crop Type:",
    "crop-type-placeholder": "e.g., Wheat, Rice, Corn",
    "growth-stage-label": "Growth Stage:",
    "growth-stage-placeholder": "e.g., Germination, Flowering, Harvesting",
    "soil-type-label": "Soil Type:",
    "soil-type-placeholder": "e.g., Loamy, Clay, Sandy",
    "observations-label": "Recent Observations:",
    "observations-placeholder": "e.g., Yellowing leaves, new shoots, pest signs",
    "update-crop-details": "Update Crop Details & Get Advice",
    "crop-details-updated": "Crop details updated! Getting personalized advice...",
    "crop-advice": "ЁЯМ▒ Crop Advice",
    "pest-alerts": "ЁЯРЫ Pest Alerts",
    "watering-suggestion": "ЁЯТз Watering Suggestion",
    "image-analysis-title": "ЁЯУ╕ Crop Image Analysis",
    "image-analysis-description": "Upload an image of your crop for AI-powered insights.",
    "upload-image-button": "Choose Image",
    "no-file-chosen": "No file chosen",
    "analyze-image-button": "Analyze Image",
    "image-upload-success": "Image uploaded successfully. Analyzing...",
    "image-analysis-failed": "Image analysis failed. Please try again.",
    "analysis-results-heading": "Analysis Results:",
    "detected-crop-type": "Detected Crop Type:",
    "health-status": "Health Status:",
    "potential-issues": "Potential Issues:",
  },
  hi: {
    "page-title": "рдлрд╕рд▓ рд╕рд▓рд╛рд╣ тАУ рдореМрд╕рдо рдбреИрд╢рдмреЛрд░реНрдб",
    language: "рднрд╛рд╖рд╛",
    "weather-info": "рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА",
    "enter-city": "рд╢рд╣рд░ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ",
    search: "рдЦреЛрдЬреЗрдВ",
    "locate-me": "рдореБрдЭреЗ рдвреВрдВрдвреЛ",
    "loading-weather": "рдореМрд╕рдо рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    temperature: "рддрд╛рдкрдорд╛рди:",
    humidity: "рдЖрд░реНрджреНрд░рддрд╛:",
    windSpeed: "рд╣рд╡рд╛ рдХреА рдЧрддрд┐:",
    condition: "рд╕реНрдерд┐рддрд┐:",
    "crop-details-title": "ЁЯМ╛ рдлрд╕рд▓ рд╡рд┐рд╡рд░рдг",
    "crop-details-description": "рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдлрд╕рд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВред",
    "crop-type-label": "рдлрд╕рд▓ рдХрд╛ рдкреНрд░рдХрд╛рд░:",
    "crop-type-placeholder": "рдЙрджрд╛рд╣рд░рдг: рдЧреЗрд╣реВрдВ, рдЪрд╛рд╡рд▓, рдордХреНрдХрд╛",
    "growth-stage-label": "рд╡рд┐рдХрд╛рд╕ рдЪрд░рдг:",
    "growth-stage-placeholder": "рдЙрджрд╛рд╣рд░рдг: рдЕрдВрдХреБрд░рдг, рдлреВрд▓ рдЖрдирд╛, рдХрдЯрд╛рдИ",
    "soil-type-label": "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░:",
    "soil-type-placeholder": "рдЙрджрд╛рд╣рд░рдг: рджреЛрдордЯ, рдЪрд┐рдХрдиреА, рд░реЗрддреАрд▓реА",
    "observations-label": "рд╣рд╛рд▓ рдХреА рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ:",
    "observations-placeholder": "рдЙрджрд╛рд╣рд░рдг: рдкрддреНрддрд┐рдпрд╛рдВ рдкреАрд▓реА рдкрдбрд╝рдирд╛, рдирдИ рдХреЛрдВрдкрд▓реЗрдВ, рдХреАрдЯ рдХреЗ рд▓рдХреНрд╖рдг",
    "update-crop-details": "рдлрд╕рд▓ рд╡рд┐рд╡рд░рдг рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ рдФрд░ рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
    "crop-details-updated": "рдлрд╕рд▓ рд╡рд┐рд╡рд░рдг рдЕрдкрдбреЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛! рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рд╣реЛ рд░рд╣реА рд╣реИ...",
    "crop-advice": "ЁЯМ▒ рдлрд╕рд▓ рд╕рд▓рд╛рд╣",
    "pest-alerts": "ЁЯРЫ рдХреАрдЯ рдЕрд▓рд░реНрдЯ",
    "watering-suggestion": "ЁЯТз рдкрд╛рдиреА рджреЗрдиреЗ рдХрд╛ рд╕реБрдЭрд╛рд╡",
    "image-analysis-title": "ЁЯУ╕ рдлрд╕рд▓ рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
    "image-analysis-description": "рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдлрд╕рд▓ рдХреА рдПрдХ рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
    "upload-image-button": "рдЫрд╡рд┐ рдЪреБрдиреЗрдВ",
    "no-file-chosen": "рдХреЛрдИ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рдЪреБрдиреА рдЧрдИ",
    "analyze-image-button": "рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
    "image-upload-success": "рдЫрд╡рд┐ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрд▓реЛрдб рдХреА рдЧрдИред рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
    "image-analysis-failed": "рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╡рд┐рдлрд▓ рд░рд╣рд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
    "analysis-results-heading": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо:",
    "detected-crop-type": "рдкрд╣рдЪрд╛рдирд╛ рдЧрдпрд╛ рдлрд╕рд▓ рдкреНрд░рдХрд╛рд░:",
    "health-status": "рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реНрдерд┐рддрд┐:",
    "potential-issues": "рд╕рдВрднрд╛рд╡рд┐рдд рдореБрджреНрджреЗ:",
  },
  bn: {
    "page-title": "рж╢рж╕рзНржп ржкрж░рж╛ржорж░рзНрж╢ тАУ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб",
    language: "ржнрж╛рж╖рж╛",
    "weather-info": "ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рждржерзНржп",
    "enter-city": "рж╢рж╣рж░рзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи",
    search: "ржЕржирзБрж╕ржирзНржзрж╛ржи",
    "locate-me": "ржЖржорж╛ржХрзЗ ржЦрзБржБржЬрзБржи",
    "loading-weather": "ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржбрзЗржЯрж╛ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...",
    temperature: "рждрж╛ржкржорж╛рждрзНрж░рж╛:",
    humidity: "ржЖрж░рзНржжрзНрж░рждрж╛:",
    windSpeed: "ржмрж╛рждрж╛рж╕рзЗрж░ ржЧрждрж┐:",
    condition: "ржЕржмрж╕рзНржерж╛:",
    "crop-details-title": "ЁЯМ╛ ржлрж╕рж▓рзЗрж░ ржмрж┐ржмрж░ржг",
    "crop-details-description": "ржмрзНржпржХрзНрждрж┐ржЧржд ржкрж░рж╛ржорж░рзНрж╢ ржкрзЗрждрзЗ ржЖржкржирж╛рж░ ржлрж╕рж▓ рж╕ржорзНржкрж░рзНржХрзЗ ржмрж┐ржмрж░ржг рж▓рж┐ржЦрзБржиред",
    "crop-type-label": "ржлрж╕рж▓рзЗрж░ ржкрзНрж░ржХрж╛рж░:",
    "crop-type-placeholder": "ржпрзЗржоржи: ржЧржо, ржзрж╛ржи, ржнрзБржЯрзНржЯрж╛",
    "growth-stage-label": "ржмрзГржжрзНржзрж┐рж░ ржкрж░рзНржпрж╛ржпрж╝:",
    "growth-stage-placeholder": "ржпрзЗржоржи: ржЕржЩрзНржХрзБрж░рзЛржжржЧржо, ржлрзБрж▓ ржЖрж╕рж╛, ржлрж╕рж▓ ржХрж╛ржЯрж╛",
    "soil-type-label": "ржорж╛ржЯрж┐рж░ ржкрзНрж░ржХрж╛рж░:",
    "soil-type-placeholder": "ржпрзЗржоржи: ржжрзЛржЖржБрж╢, ржПржБржЯрзЗрж▓, ржмрзЗрж▓рзЗ",
    "observations-label": "рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ ржкрж░рзНржпржмрзЗржХрзНрж╖ржг:",
    "observations-placeholder": "ржпрзЗржоржи: ржкрж╛рждрж╛ рж╣рж▓рзБржж рж╣ржУржпрж╝рж╛, ржирждрзБржи ржЕржЩрзНржХрзБрж░, ржХрзАржЯржкрждржЩрзНржЧрзЗрж░ рж▓ржХрзНрж╖ржг",
    "update-crop-details": "ржлрж╕рж▓рзЗрж░ ржмрж┐ржмрж░ржг ржЖржкржбрзЗржЯ ржХрж░рзБржи ржПржмржВ ржкрж░рж╛ржорж░рзНрж╢ ржкрж╛ржи",
    "crop-details-updated": "ржлрж╕рж▓рзЗрж░ ржмрж┐ржмрж░ржг ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржмрзНржпржХрзНрждрж┐ржЧржд ржкрж░рж╛ржорж░рзНрж╢ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржЪрзНржЫрзЗ...",
    "crop-advice": "ЁЯМ▒ ржлрж╕рж▓рзЗрж░ ржкрж░рж╛ржорж░рзНрж╢",
    "pest-alerts": "ЁЯРЫ ржХрзАржЯржкрждржЩрзНржЧрзЗрж░ рж╕рждрж░рзНржХрждрж╛",
    "watering-suggestion": "ЁЯТз ржЬрж▓ ржжрзЗржУржпрж╝рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢",
    "image-analysis-title": "ЁЯУ╕ ржлрж╕рж▓рзЗрж░ ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг",
    "image-analysis-description": "ржПржЖржЗ-ржЪрж╛рж▓рж┐ржд ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐рж░ ржЬржирзНржп ржЖржкржирж╛рж░ ржлрж╕рж▓рзЗрж░ ржПржХржЯрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржиред",
    "upload-image-button": "ржЫржмрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
    "no-file-chosen": "ржХрзЛржирзЛ ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рж╛ рж╣ржпрж╝ржирж┐",
    "analyze-image-button": "ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи",
    "image-upload-success": "ржЫржмрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржЪрж▓ржЫрзЗ...",
    "image-analysis-failed": "ржЫржмрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
    "analysis-results-heading": "ржмрж┐рж╢рд▓реЗрд╖рдг ржлрж▓рж╛ржлрж▓:",
    "detected-crop-type": "рж╢ржирж╛ржХрзНрждржХрзГржд ржлрж╕рж▓рзЗрж░ ржкрзНрж░ржХрж╛рж░:",
    "health-status": "рж╕рзНржмрж╛рж╕рзНржерзНржп ржЕржмрж╕рзНржерж╛:",
    "potential-issues": "рж╕ржорзНржнрж╛ржмрзНржп рж╕ржорж╕рзНржпрж╛:",
  },
  ta: {
    "page-title": "рокропро┐ро░рпН роЖро▓рпЛроЪройрпИ тАУ ро╡ро╛ройро┐ро▓рпИ роЯро╛ро╖рпНрокрпЛро░рпНроЯрпБ",
    language: "роорпКро┤ро┐",
    "weather-info": "ро╡ро╛ройро┐ро▓рпИ родроХро╡ро▓рпН",
    "enter-city": "роироХро░родрпНродро┐ройрпН рокрпЖропро░рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
    search: "родрпЗроЯро▓рпН",
    "locate-me": "роОройрпНройрпИ роХрогрпНроЯрпБрокро┐роЯро┐",
    "loading-weather": "ро╡ро╛ройро┐ро▓рпИ родро░ро╡рпБ роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    temperature: "ро╡рпЖрокрпНрокроиро┐ро▓рпИ:",
    humidity: "роИро░рокрпНрокродроорпН:",
    windSpeed: "роХро╛ро▒рпНро▒ро┐ройрпН ро╡рпЗроХроорпН:",
    condition: "роиро┐ро▓рпИ:",
    "crop-details-title": "ЁЯМ╛ рокропро┐ро░рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН",
    "crop-details-description": "родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИропрпИрокрпН рокрпЖро▒ роЙроЩрпНроХро│рпН рокропро┐ро░рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.",
    "crop-type-label": "рокропро┐ро░рпН ро╡роХрпИ:",
    "crop-type-placeholder": "роО.роХро╛., роХрпЛродрпБроорпИ, роЕро░ро┐роЪро┐, роЪрпЛро│роорпН",
    "growth-stage-label": "ро╡ро│ро░рпНроЪрпНроЪро┐ роиро┐ро▓рпИ:",
    "growth-stage-placeholder": "роО.роХро╛., роорпБро│рпИродрпНродро▓рпН, рокрпВродрпНродро▓рпН, роЕро▒рпБро╡роЯрпИ",
    "soil-type-label": "роорогрпН ро╡роХрпИ:",
    "soil-type-placeholder": "роО.роХро╛., роХро│ро┐роорогрпН, роХро│ро┐роорогрпН, роорогро▓рпН",
    "observations-label": "роЪроорпАрокродрпНродро┐роп роЕро╡родро╛ройро┐рокрпНрокрпБроХро│рпН:",
    "observations-placeholder": "роО.роХро╛., роЗро▓рпИроХро│рпН роороЮрпНроЪро│рпН роиро┐ро▒рооро╛родро▓рпН, рокрпБродро┐роп родро│ро┐ро░рпНроХро│рпН, рокрпВроЪрпНроЪро┐ роЕро▒ро┐роХрпБро▒ро┐роХро│рпН",
    "update-crop-details": "рокропро┐ро░рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИ рокрпБродрпБрокрпНрокро┐родрпНродрпБ роЖро▓рпЛроЪройрпИ рокрпЖро▒рпБроЩрпНроХро│рпН",
    "crop-details-updated": "рокропро┐ро░рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпН рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯрой! родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИ рокрпЖро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    "crop-advice": "ЁЯМ▒ рокропро┐ро░рпН роЖро▓рпЛроЪройрпИ",
    "pest-alerts": "ЁЯРЫ рокрпВроЪрпНроЪро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН",
    "watering-suggestion": "ЁЯТз роирпАро░рпНрокрпНрокро╛роЪрой рокро░ро┐роирпНродрпБро░рпИ",
    "image-analysis-title": "ЁЯУ╕ рокропро┐ро░рпН рокроЯ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ",
    "image-analysis-description": "AI-роЗропроЩрпНроХрпБроорпН роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН рокропро┐ро░ро┐ройрпН рокроЯродрпНродрпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН.",
    "upload-image-button": "рокроЯродрпНродрпИродрпН родрпЗро░рпНро╡рпБроЪрпЖропрпН",
    "no-file-chosen": "роХрпЛрокрпНрокрпБ роОродрпБро╡рпБроорпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ",
    "analyze-image-button": "рокроЯродрпНродрпИ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпН",
    "image-upload-success": "рокроЯроорпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ рокродро┐ро╡рпЗро▒рпНро▒рокрпНрокроЯрпНроЯродрпБ. рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
    "image-analysis-failed": "рокроЯ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ родрпЛро▓рпНро╡ро┐ропроЯрпИроирпНродродрпБ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
    "analysis-results-heading": "рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роорпБроЯро┐ро╡рпБроХро│рпН:",
    "detected-crop-type": "роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯ рокропро┐ро░рпН ро╡роХрпИ:",
    "health-status": "роЖро░рпЛроХрпНроХро┐роп роиро┐ро▓рпИ:",
    "potential-issues": "роЪро╛родрпНродро┐ропрооро╛рой роЪро┐роХрпНроХро▓рпНроХро│рпН:",
  },
  te: {
    "page-title": "р░кр░Вр░Я р░╕р░▓р░╣р░╛ тАУ р░╡р░╛р░др░╛р░╡р░░р░г р░бр░╛р░╖р▒НтАМр░мр▒Лр░░р▒Нр░бр▒Н",
    language: "р░нр░╛р░╖",
    "weather-info": "р░╡р░╛р░др░╛р░╡р░░р░г р░╕р░ор░╛р░Ър░╛р░░р░В",
    "enter-city": "р░ир░Чр░░р░В р░кр▒Зр░░р▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
    search: "р░╢р▒Лр░зр░и",
    "locate-me": "р░ир░ир▒Нр░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър▒Б",
    "loading-weather": "р░╡р░╛р░др░╛р░╡р░░р░г р░бр▒Зр░Яр░╛ р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...",
    temperature: "р░Йр░╖р▒Нр░гр▒Лр░Чр▒Нр░░р░д:",
    humidity: "р░др▒Зр░о:",
    windSpeed: "р░Чр░╛р░▓р░┐ р░╡р▒Зр░Чр░В:",
    condition: "р░кр░░р░┐р░╕р▒Нр░ер░┐р░др░┐:",
    "crop-details-title": "ЁЯМ╛ р░кр░Вр░Я р░╡р░┐р░╡р░░р░╛р░▓р▒Б",
    "crop-details-description": "р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░др▒Ар░Хр░░р░┐р░Вр░Ър░┐р░и р░╕р░▓р░╣р░╛ р░кр▒Кр░Вр░жр░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░кр░Вр░Я р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐.",
    "crop-type-label": "р░кр░Вр░Я р░░р░Хр░В:",
    "crop-type-placeholder": "р░Йр░жр░╛: р░Чр▒Лр░зр▒Бр░о, р░╡р░░р░┐, р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и",
    "growth-stage-label": "р░╡р▒Гр░жр▒Нр░зр░┐ р░жр░╢:",
    "growth-stage-placeholder": "р░Йр░жр░╛: р░ор▒Кр░▓р░Хр▒Жр░др▒Нр░др░бр░В, р░кр▒Вр░д, р░Хр▒Лр░д",
    "soil-type-label": "р░ир▒Зр░▓ р░░р░Хр░В:",
    "soil-type-placeholder": "р░Йр░жр░╛: р░▓р▒Лр░ор▒А, р░мр░Вр░Хр░ор░Яр▒Нр░Яр░┐, р░Зр░╕р▒Бр░Х",
    "observations-label": "р░Зр░Яр▒Ар░╡р░▓р░┐ р░кр░░р░┐р░╢р▒Ар░▓р░ир░▓р▒Б:",
    "observations-placeholder": "р░Йр░жр░╛: р░Жр░Хр▒Бр░▓р▒Б р░кр░╕р▒Бр░кр▒Б р░░р░Вр░Чр▒Бр░▓р▒Лр░Хр░┐ р░ор░╛р░░р░бр░В, р░Хр▒Кр░др▒Нр░д р░░р▒Жр░ор▒Нр░ор░▓р▒Б, р░др▒Жр░Чр▒Бр░▓р▒Б р░╕р░Вр░Хр▒Зр░др░╛р░▓р▒Б",
    "update-crop-details": "р░кр░Вр░Я р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐ & р░╕р░▓р░╣р░╛ р░кр▒Кр░Вр░жр░Вр░бр░┐",
    "crop-details-updated": "р░кр░Вр░Я р░╡р░┐р░╡р░░р░╛р░▓р▒Б р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░мр░бр▒Нр░бр░╛р░пр░┐! р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░др▒Ар░Хр░░р░┐р░Вр░Ър░┐р░и р░╕р░▓р░╣р░╛ р░кр▒Кр░Вр░жр░мр░бр▒Бр░др▒Лр░Вр░жр░┐...",
    "crop-advice": "ЁЯМ▒ р░кр░Вр░Я р░╕р░▓р░╣р░╛",
    "pest-alerts": "ЁЯРЫ р░др▒Жр░Чр▒Бр░▓р▒Б р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б",
    "watering-suggestion": "ЁЯТз р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓ р░╕р▒Вр░Ър░и",
    "image-analysis-title": "ЁЯУ╕ р░кр░Вр░Я р░Ър░┐р░др▒Нр░░р░В р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
    "image-analysis-description": "AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░Хр▒Вр░бр░┐р░и р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓ р░Хр▒Лр░╕р░В р░ор▒А р░кр░Вр░Я р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐.",
    "upload-image-button": "р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
    "no-file-chosen": "р░лр▒Ир░▓р▒Н р░Ор░Вр░Ър▒Бр░Хр▒Лр░мр░бр░▓р▒Зр░жр▒Б",
    "analyze-image-button": "р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐",
    "image-upload-success": "р░Ър░┐р░др▒Нр░░р░В р░╡р░┐р░Ьр░пр░╡р░Вр░др░Вр░Чр░╛ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐. р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...",
    "image-analysis-failed": "р░Ър░┐р░др▒Нр░░ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╡р░┐р░лр░▓р░ор▒Ир░Вр░жр░┐. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.",
    "analysis-results-heading": "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░лр░▓р░┐р░др░╛р░▓р▒Б:",
    "detected-crop-type": "р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░и р░кр░Вр░Я р░░р░Хр░В:",
    "health-status": "р░Жр░░р▒Лр░Чр▒Нр░п р░╕р▒Нр░ер░┐р░др░┐:",
    "potential-issues": "р░╕р░Вр░нр░╛р░╡р▒Нр░п р░╕р░ор░╕р▒Нр░пр░▓р▒Б:",
  },
  mr: {
    "page-title": "рдкреАрдХ рд╕рд▓реНрд▓рд╛ тАУ рд╣рд╡рд╛рдорд╛рди рдбреЕрд╢рдмреЛрд░реНрдб",
    language: "рднрд╛рд╖рд╛",
    "weather-info": "рд╣рд╡рд╛рдорд╛рди рдорд╛рд╣рд┐рддреА",
    "enter-city": "рд╢рд╣рд░рд╛рдЪреЗ рдирд╛рд╡ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛",
    search: "рд╢реЛрдзрд╛",
    "locate-me": "рдорд▓рд╛ рд╢реЛрдзрд╛",
    "loading-weather": "рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛрдд рдЖрд╣реЗ...",
    temperature: "рддрд╛рдкрдорд╛рди:",
    humidity: "рдЖрд░реНрджреНрд░рддрд╛:",
    windSpeed: "рд╡рд╛рд▒реНрдпрд╛рдЪрд╛ рд╡реЗрдЧ:",
    condition: "рд╕реНрдерд┐рддреА:",
    "crop-details-title": "ЁЯМ╛ рдкрд┐рдХрд╛рдЪреЗ рддрдкрд╢реАрд▓",
    "crop-details-description": "рд╡реИрдпрдХреНрддрд┐рдХ рд╕рд▓реНрд▓рд╛ рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрд▓реНрдпрд╛ рдкрд┐рдХрд╛рдмрджреНрджрд▓ рддрдкрд╢реАрд▓ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛.",
    "crop-type-label": "рдкрд┐рдХрд╛рдЪрд╛ рдкреНрд░рдХрд╛рд░:",
    "crop-type-placeholder": "рдЙрджрд╛. рдЧрд╣реВ, рддрд╛рдВрджреВрд│, рдордХрд╛",
    "growth-stage-label": "рд╡рд╛рдвреАрдЪрд╛ рдЯрдкреНрдкрд╛:",
    "growth-stage-placeholder": "рдЙрджрд╛. рдЙрдЧрд╡рдг, рдлреБрд▓реЛрд░рд╛, рдХрд╛рдврдгреА",
    "soil-type-label": "рдорд╛рддреАрдЪрд╛ рдкреНрд░рдХрд╛рд░:",
    "soil-type-placeholder": "рдЙрджрд╛. рдЧрд╛рд│рд╛рдЪреА, рдЪрд┐рдХрдгрдорд╛рддреА, рд╡рд╛рд▓реБрдХрд╛рдордп",
    "observations-label": "рдЕрд▓реАрдХрдбреАрд▓ рдирд┐рд░реАрдХреНрд╖рдгреЗ:",
    "observations-placeholder": "рдЙрджрд╛. рдкрд╛рдиреЗ рдкрд┐рд╡рд│реА рдкрдбрдгреЗ, рдирд╡реАрди рдХреЛрдВрдм, рдХреАрдЯрдХрд╛рдВрдЪреА рдЪрд┐рдиреНрд╣реЗ",
    "update-crop-details": "рдкрд┐рдХрд╛рдЪреЗ рддрдкрд╢реАрд▓ рдЕрдкрдбреЗрдЯ рдХрд░рд╛ рдЖрдгрд┐ рд╕рд▓реНрд▓рд╛ рдорд┐рд│рд╡рд╛",
    "crop-details-updated": "рдкрд┐рдХрд╛рдЪреЗ рддрдкрд╢реАрд▓ рдЕрдкрдбреЗрдЯ рдХреЗрд▓реЗ! рд╡реИрдпрдХреНрддрд┐рдХ рд╕рд▓реНрд▓рд╛ рдорд┐рд│рдд рдЖрд╣реЗ...",
    "crop-advice": "ЁЯМ▒ рдкреАрдХ рд╕рд▓реНрд▓рд╛",
    "pest-alerts": "ЁЯРЫ рдХреАрдЯрдХ рд╕реВрдЪрдирд╛",
    "watering-suggestion": "ЁЯТз рдкрд╛рдгреА рджреЗрдгреНрдпрд╛рдЪреЗ рд╕реВрдЪрдирд╛",
    "image-analysis-title": "ЁЯУ╕ рдкреАрдХ рдкреНрд░рддрд┐рдорд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
    "image-analysis-description": "рдПрдЖрдп-рд╢рдХреНрддреАрд╡рд░ рдЖрдзрд╛рд░рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯреАрд╕рд╛рдареА рдЖрдкрд▓реНрдпрд╛ рдкрд┐рдХрд╛рдЪреА рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛.",
    "upload-image-button": "рдкреНрд░рддрд┐рдорд╛ рдирд┐рд╡рдбрд╛",
    "no-file-chosen": "рдХреЛрдгрддреАрд╣реА рдлрд╛рдЗрд▓ рдирд┐рд╡рдбрд▓реЗрд▓реА рдирд╛рд╣реА",
    "analyze-image-button": "рдкреНрд░рддрд┐рдорд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рд╛",
    "image-upload-success": "рдкреНрд░рддрд┐рдорд╛ рдпрд╢рд╕реНрд╡реАрд░рд┐рддреНрдпрд╛ рдЕрдкрд▓реЛрдб рдХреЗрд▓реА. рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рдд рдЖрд╣реЗ...",
    "image-analysis-failed": "рдкреНрд░рддрд┐рдорд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдЕрдпрд╢рд╕реНрд╡реА рдЭрд╛рд▓реЗ. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
    "analysis-results-heading": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкрд░рд┐рдгрд╛рдо:",
    "detected-crop-type": "рдУрд│рдЦрд▓реЗрд▓рд╛ рдкрд┐рдХрд╛рдЪрд╛ рдкреНрд░рдХрд╛рд░:",
    "health-status": "рдЖрд░реЛрдЧреНрдп рд╕реНрдерд┐рддреА:",
    "potential-issues": "рд╕рдВрднрд╛рд╡реНрдп рд╕рдорд╕реНрдпрд╛:",
  },
}

function translatePage(lang) {
  const currentTranslations = translations[lang]
  if (!currentTranslations) {
    console.warn(`No translations found for language: ${lang}`)
    return
  }

  // Update elements with data-i18n attribute
  document.querySelectorAll("[data-i18n]").forEach((element) => {
    const key = element.getAttribute("data-i18n")
    if (currentTranslations[key]) {
      element.textContent = currentTranslations[key]
    }
  })

  // Update elements with data-i18n-placeholder attribute
  document.querySelectorAll("[data-i18n-placeholder]").forEach((element) => {
    const key = element.getAttribute("data-i18n-placeholder")
    if (currentTranslations[key]) {
      element.setAttribute("placeholder", currentTranslations[key])
    }
  })

  // Update the document title
  const titleElement = document.querySelector("title")
  if (titleElement && currentTranslations["page-title"]) {
    titleElement.textContent = currentTranslations["page-title"]
  }

  // Set the lang attribute on the html tag
  document.documentElement.lang = lang
}

// Global variable to store current crop details
const currentCropDetails = {
  cropType: "wheat",
  growthStage: "flowering",
  soilType: "loamy",
  observations: "healthy growth",
  imageAnalysis: {}, // New field for image analysis results
}

let selectedImageFile = null // To store the selected file for upload

document.addEventListener("DOMContentLoaded", () => {
  // Initial translation based on the default selected option
  const initialLang = document.getElementById("langSelect").value
  translatePage(initialLang)

  // Populate crop details inputs with initial values
  document.getElementById("cropTypeInput").value = currentCropDetails.cropType
  document.getElementById("growthStageInput").value = currentCropDetails.growthStage
  document.getElementById("soilTypeInput").value = currentCropDetails.soilType
  document.getElementById("observationsInput").value = currentCropDetails.observations

  fetchWeatherByGeolocation()
  fetchPersonalizedAdvice() // Call personalized advice on load

  document.getElementById("langSelect").addEventListener("change", function () {
    translatePage(this.value)
  })

  document.getElementById("searchButton").addEventListener("click", () => {
    const city = document.getElementById("cityInput").value
    if (city) {
      fetchWeatherByCity(city)
    } else {
      displayError("Please enter a city name.")
    }
  })

  document.getElementById("locateMeButton").addEventListener("click", fetchWeatherByGeolocation)
  document.getElementById("updateCropDetailsButton").addEventListener("click", updateCropDetails)

  // Image Upload Event Listeners
  document.getElementById("uploadImageButton").addEventListener("click", () => {
    document.getElementById("cropImageInput").click()
  })

  document.getElementById("cropImageInput").addEventListener("change", (event) => {
    const file = event.target.files[0]
    if (file) {
      selectedImageFile = file
      document.getElementById("fileNameDisplay").textContent = file.name
      const reader = new FileReader()
      reader.onload = (e) => {
        const preview = document.getElementById("uploadedImagePreview")
        preview.src = e.target.result
        preview.style.display = "block"
      }
      reader.readAsDataURL(file)
    } else {
      selectedImageFile = null
      document.getElementById("fileNameDisplay").textContent =
        translations[document.documentElement.lang]["no-file-chosen"]
      document.getElementById("uploadedImagePreview").style.display = "none"
    }
  })

  document.getElementById("analyzeImageButton").addEventListener("click", fetchCropImageAnalysis)
})

async function fetchWeatherByGeolocation() {
  displayLoading(true)
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const lat = position.coords.latitude
        const lon = position.coords.longitude
        await fetchWeather(`/api/weather?lat=${lat}&lon=${lon}`)
      },
      () => {
        displayError("Unable to retrieve location.")
        fetchWeatherByCity("Motihari")
      },
    )
  } else {
    displayError("Geolocation not supported.")
    fetchWeatherByCity("Motihari")
  }
}

async function fetchWeatherByCity(city) {
  displayLoading(true)
  await fetchWeather(`/api/weather?city=${encodeURIComponent(city)}`)
}

async function fetchWeather(url) {
  try {
    const res = await fetch(url)
    if (!res.ok) throw new Error((await res.json()).error)
    const data = await res.json()

    document.getElementById("temperature").textContent = `${data.temperature} ┬░C`
    document.getElementById("humidity").textContent = `${data.humidity} %`
    document.getElementById("windSpeed").textContent = `${data.windSpeed} km/h`
    document.getElementById("condition").textContent = data.condition
    document.querySelector(".weather-icon").textContent = mapIconToEmoji(data.icon)
    document.getElementById("locationDisplay").textContent = data.city
  } catch (err) {
    displayError(err.message)
  } finally {
    displayLoading(false)
  }
}

function displayLoading(show) {
  document.getElementById("loadingMessage").style.display = show ? "block" : "none"
}

function displayError(message) {
  const error = document.getElementById("errorMessage")
  error.textContent = message
  error.style.display = message ? "block" : "none"
  document.getElementById("cropDetailsMessage").style.display = "none" // Hide info message if error
  document.getElementById("imageAnalysisMessage").style.display = "none" // Hide image info message if error
}

function displayInfo(message, targetElementId = "cropDetailsMessage") {
  const info = document.getElementById(targetElementId)
  info.textContent = message
  info.style.display = message ? "block" : "none"
  document.getElementById("errorMessage").style.display = "none" // Hide error message if info
}

function mapIconToEmoji(icon) {
  const icons = {
    "01d": "тШАя╕П",
    "01n": "ЁЯМЩ",
    "02d": "тЫЕ",
    "03d": "тШБя╕П",
    "09d": "ЁЯМзя╕П",
    "10d": "ЁЯМжя╕П",
    "11d": "тЫИя╕П",
    "13d": "тЭДя╕П",
    "50d": "ЁЯМля╕П",
  }
  return icons[icon] || "тЭУ"
}

async function updateCropDetails() {
  currentCropDetails.cropType = document.getElementById("cropTypeInput").value || "wheat"
  currentCropDetails.growthStage = document.getElementById("growthStageInput").value || "flowering"
  currentCropDetails.soilType = document.getElementById("soilTypeInput").value || "loamy"
  currentCropDetails.observations = document.getElementById("observationsInput").value || "healthy growth"

  displayInfo(translations[document.documentElement.lang]["crop-details-updated"])
  await fetchPersonalizedAdvice()
  setTimeout(() => displayInfo("", "cropDetailsMessage"), 3000) // Hide message after 3 seconds
}

async function fetchPersonalizedAdvice() {
  const params = new URLSearchParams(currentCropDetails).toString()
  try {
    const [adviceRes, pestsRes, wateringRes] = await Promise.all([
      fetch(`/api/advice?${params}`),
      fetch(`/api/pests?${params}`),
      fetch(`/api/watering?${params}`),
    ])

    const adviceData = await adviceRes.json()
    const pestsData = await pestsRes.json()
    const wateringData = await wateringRes.json()

    document.getElementById("adviceText").textContent = adviceData.advice

    const pestList = document.getElementById("pestAlerts")
    pestList.innerHTML = ""
    pestsData.alerts.forEach((a) => {
      const li = document.createElement("li")
      li.textContent = a
      pestList.appendChild(li)
    })

    document.getElementById("wateringText").textContent = wateringData.watering
  } catch (error) {
    displayError("Failed to fetch personalized advice: " + error.message)
  }
}

async function fetchCropImageAnalysis() {
  if (!selectedImageFile) {
    displayError("Please select an image to analyze.", "imageAnalysisMessage")
    return
  }

  displayInfo(translations[document.documentElement.lang]["image-upload-success"], "imageAnalysisMessage")
  document.getElementById("imageAnalysisResults").style.display = "none" // Hide previous results

  const formData = new FormData()
  formData.append("crop_image", selectedImageFile)

  try {
    const res = await fetch("/api/analyze-crop-image", {
      method: "POST",
      body: formData,
    })

    if (!res.ok) throw new Error((await res.json()).error || "Unknown error during analysis.")

    const data = await res.json()
    currentCropDetails.imageAnalysis = data // Store analysis results

    // Update crop details inputs based on image analysis
    if (data.detectedCropType) {
      document.getElementById("cropTypeInput").value = data.detectedCropType
      currentCropDetails.cropType = data.detectedCropType
    }
    if (data.healthStatus || data.potentialIssues) {
      const newObservations = []
      if (data.healthStatus && data.healthStatus !== "Healthy") {
        newObservations.push(`Health: ${data.healthStatus}`)
      }
      if (data.potentialIssues && data.potentialIssues.length > 0) {
        newObservations.push(`Issues: ${data.potentialIssues.join(", ")}`)
      }
      if (newObservations.length > 0) {
        document.getElementById("observationsInput").value = newObservations.join(". ")
        currentCropDetails.observations = newObservations.join(". ")
      }
    }

    // Display analysis results
    document.getElementById("detectedCropType").textContent = data.detectedCropType || "N/A"
    document.getElementById("healthStatus").textContent = data.healthStatus || "N/A"
    document.getElementById("potentialIssues").textContent = data.potentialIssues.join(", ") || "None"
    document.getElementById("imageAnalysisResults").style.display = "block"

    displayInfo("", "imageAnalysisMessage") // Clear info message
    await fetchPersonalizedAdvice() // Re-fetch advice with updated details
  } catch (err) {
    displayError(
      translations[document.documentElement.lang]["image-analysis-failed"] + " " + err.message,
      "imageAnalysisMessage",
    )
  }
}
